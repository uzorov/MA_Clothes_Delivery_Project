name: CI/CD pipline

on:
  push:
    branches: [ "master" ]

jobs:

  test-app-printing:
    name: Run app_printing tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare unit tests
        run: |
          sudo apt update
          sudo apt install -y python3-pip
          pip install -r ./app_printing/requirements.txt

      - name: Run unit tests
        run: |
          pytest ./app_printing/tests/unit

      - name: Prepare integration tests
        run: |
          sudo docker run --name pg-tests -e POSTGRES_PASSWORD=krya -p 5432:5432 -d postgres:latest
          rm ./.env
          echo "AMQP_URL=$AMQP_URL
          POSTGRES_URL=$POSTGRES_URL
          " > ./.env
          sleep 5
        env:
          AMQP_URL: amqp://guest:guest@actual_pr678-rabbitmq-1:5672/
          POSTGRES_URL: postgresql://postgres:krya@localhost:5432/postgres

      - name: Run integration tests
        run: |
          pytest ./app_printing/tests/integration

  test-app-delivery:
    name: Run app_delivery tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare unit tests
        run: |
          sudo apt update
          sudo apt install -y python3-pip
          pip install -r ./app_delivery/requirements.txt

      - name: Run unit tests
        run: |
          pytest ./app_delivery/tests/unit

      - name: Prepare integration tests
        run: |
          sudo docker run --name pg-tests -e POSTGRES_PASSWORD=krya -p 5432:5432 -d postgres:latest
          rm ./.env
          echo "AMQP_URL=$AMQP_URL
          POSTGRES_URL=$POSTGRES_URL
          " > ./.env
          sleep 5
        env:
          AMQP_URL: amqp://guest:guest@actual_pr678-rabbitmq-1:5672/
          POSTGRES_URL: postgresql://postgres:krya@localhost:5432/postgres

      - name: Run integration tests
        run: |
          pytest ./app_delivery/tests/integration

  test-app-payment:
    name: Run app_payment tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare unit tests
        run: |
          sudo apt update
          sudo apt install -y python3-pip
          pip install -r ./app_payment/requirements.txt

      - name: Run unit tests
        run: |
          pytest ./app_payment/tests/unit

      - name: Prepare integration tests
        run: |
          sudo docker run --name pg-tests -e POSTGRES_PASSWORD=krya -p 5432:5432 -d postgres:latest
          rm ./.env
          echo "AMQP_URL=$AMQP_URL
          POSTGRES_URL=$POSTGRES_URL
          " > ./.env
          sleep 5
        env:
          AMQP_URL: amqp://guest:guest@actual_pr678-rabbitmq-1:5672/
          POSTGRES_URL: postgresql://postgres:krya@localhost:5432/postgres

      - name: Run integration tests
        run: |
          pytest ./app_payment/tests/integration

  test-app-order:
    name: Run app_order tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare unit tests
        run: |
          sudo apt update
          sudo apt install -y python3-pip
          pip install -r ./app_order/requirements.txt

      - name: Run unit tests
        run: |
          pytest ./app_order/tests/unit

      - name: Prepare integration tests
        run: |
          sudo docker run --name pg-tests -e POSTGRES_PASSWORD=krya -p 5432:5432 -d postgres:latest
          rm ./.env
          echo "AMQP_URL=$AMQP_URL
          POSTGRES_URL=$POSTGRES_URL
          " > ./.env
          sleep 5
        env:
          AMQP_URL: amqp://guest:guest@actual_pr678-rabbitmq-1:5672/
          POSTGRES_URL: postgresql://postgres:krya@localhost:5432/postgres

      - name: Run integration tests
        run: |
          pytest ./app_order/tests/integration

  test-app-item:
    name: Run app_item tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare unit tests
        run: |
          sudo apt update
          sudo apt install -y python3-pip
          pip install -r ./app_item/requirements.txt

      - name: Run unit tests
        run: |
          pytest ./app_item/tests/unit

      - name: Prepare integration tests
        run: |
          sudo docker run --name pg-tests -e POSTGRES_PASSWORD=krya -p 5432:5432 -d postgres:latest
          rm ./.env
          echo "AMQP_URL=$AMQP_URL
          POSTGRES_URL=$POSTGRES_URL
          " > ./.env
          sleep 5
        env:
          AMQP_URL: amqp://guest:guest@actual_pr678-rabbitmq-1:5672/
          POSTGRES_URL: postgresql://postgres:krya@localhost:5432/postgres

      - name: Run integration tests
        run: |
          pytest ./app_item/tests/integration

  test-app-promocode:
    name: Run app_promocode tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare unit tests
        run: |
          sudo apt update
          sudo apt install -y python3-pip
          pip install -r ./app_promocode/requirements.txt

      - name: Run unit tests
        run: |
          pytest ./app_promocode/tests/unit

      - name: Prepare integration tests
        run: |
          sudo docker run --name pg-tests -e POSTGRES_PASSWORD=krya -p 5432:5432 -d postgres:latest
          rm ./.env
          echo "AMQP_URL=$AMQP_URL
          POSTGRES_URL=$POSTGRES_URL
          " > ./.env
          sleep 5
        env:
          AMQP_URL: amqp://guest:guest@actual_pr678-rabbitmq-1:5672/
          POSTGRES_URL: postgresql://postgres:krya@localhost:5432/postgres

      - name: Run integration tests
        run: |
          pytest ./app_promocode/tests/integration

  test-app-cart:
    name: Run app_cart tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare unit tests
        run: |
          sudo apt update
          sudo apt install -y python3-pip
          pip install -r ./app_cart/requirements.txt

      - name: Run unit tests
        run: |
          pytest ./app_cart/tests/unit

      - name: Prepare integration tests
        run: |
          sudo docker run --name pg-tests -e POSTGRES_PASSWORD=krya -p 5432:5432 -d postgres:latest
          rm ./.env
          echo "AMQP_URL=$AMQP_URL
          POSTGRES_URL=$POSTGRES_URL
          " > ./.env
          sleep 5
        env:
          AMQP_URL: amqp://guest:guest@actual_pr678-rabbitmq-1:5672/
          POSTGRES_URL: postgresql://postgres:krya@localhost:5432/postgres

      - name: Run integration tests
        run: |
          pytest ./app_cart/tests/integration
  
  
  
  
  
  
  
  
  
  
  
  
#Printing service building____________________________________________________________________
  build-and-push-app-printing-to-yc:
    name: Build and push printing service image to YandexCloud Registry
    needs: [ test-app-printing ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build docker image
        run: |
          docker build ./app_printing -f ./app_printing/Dockerfile --tag cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app_printing_service:latest

      - name: Login to YC Registry
        uses: docker/login-action@v3.0.0
        with:
          registry: cr.yandex
          username: json_key
          password: ${{ secrets.YC_KEYS }}

      - name: Push tag YC Registry
        run: |
          docker push cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app_printing_service:latest


#Cart service building____________________________________________________________________
  build-and-push-app-cart-to-yc:
    name: Build and push cart service image to YandexCloud Registry
    needs: [ test-app-printing ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build docker image
        run: |
          docker build ./app_printing -f ./app_printing/Dockerfile --tag cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app_cart_service:latest

      - name: Login to YC Registry
        uses: docker/login-action@v3.0.0
        with:
          registry: cr.yandex
          username: json_key
          password: ${{ secrets.YC_KEYS }}

      - name: Push tag YC Registry
        run: |
          docker push cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app_cart_service:latest


#Delivery service building____________________________________________________________________
  build-and-push-app-delivery-to-yc:
    name: Build and push delivery service image to YandexCloud Registry
    needs: [ test-app-printing ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build docker image
        run: |
          docker build ./app_printing -f ./app_printing/Dockerfile --tag cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app_delivery_service:latest

      - name: Login to YC Registry
        uses: docker/login-action@v3.0.0
        with:
          registry: cr.yandex
          username: json_key
          password: ${{ secrets.YC_KEYS }}

      - name: Push tag YC Registry
        run: |
          docker push cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app_delivery_service:latest


#Item service building____________________________________________________________________
  build-and-push-app-item-to-yc:
    name: Build and push item service image to YandexCloud Registry
    needs: [ test-app-printing ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build docker image
        run: |
          docker build ./app_printing -f ./app_printing/Dockerfile --tag cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app_item_service:latest

      - name: Login to YC Registry
        uses: docker/login-action@v3.0.0
        with:
          registry: cr.yandex
          username: json_key
          password: ${{ secrets.YC_KEYS }}

      - name: Push tag YC Registry
        run: |
          docker push cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app_item_service:latest


#Order service building____________________________________________________________________
  build-and-push-app-order-to-yc:
    name: Build and push order service image to YandexCloud Registry
    needs: [ test-app-printing ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build docker image
        run: |
          docker build ./app_printing -f ./app_printing/Dockerfile --tag cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app_order_service:latest

      - name: Login to YC Registry
        uses: docker/login-action@v3.0.0
        with:
          registry: cr.yandex
          username: json_key
          password: ${{ secrets.YC_KEYS }}

      - name: Push tag YC Registry
        run: |
          docker push cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app_order_service:latest
   

#Payment service building____________________________________________________________________
  build-and-push-app-payment-to-yc:
    name: Build and push payment service image to YandexCloud Registry
    needs: [ test-app-printing ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build docker image
        run: |
          docker build ./app_printing -f ./app_printing/Dockerfile --tag cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app_payment_service:latest

      - name: Login to YC Registry
        uses: docker/login-action@v3.0.0
        with:
          registry: cr.yandex
          username: json_key
          password: ${{ secrets.YC_KEYS }}

      - name: Push tag YC Registry
        run: |
          docker push cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app_payment_service:latest


#Promocode service building____________________________________________________________________
  build-and-push-app-promocode-to-yc:
    name: Build and push promocode service image to YandexCloud Registry
    needs: [ test-app-printing ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build docker image
        run: |
          docker build ./app_printing -f ./app_printing/Dockerfile --tag cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app_promocode_service:latest

      - name: Login to YC Registry
        uses: docker/login-action@v3.0.0
        with:
          registry: cr.yandex
          username: json_key
          password: ${{ secrets.YC_KEYS }}

      - name: Push tag YC Registry
        run: |
          docker push cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app_promocode_service:latest

######################################################################################
######################################################################################
#_______________________________Deployment____________________________________________


#  deploy:
#    name: Deploy
#    runs-on: ubuntu-latest
#    needs: [ build-and-push-to-yc, test-app-printing ]
#    steps:
#      - name: Deploy serverless container
#        uses: yc-actions/yc-sls-container-deploy@v1
#        with:
#          yc-sa-json-credentials: ${{ secrets.YC_KEYS }}
#          container-name: ${{ secrets.YC_CONTAINER_NAME }}
#          folder-id: ${{ secrets.YC_FOLDER_ID }}
#          revision-image-url: cr.yandex/${{ secrets.YC_REGISTRY_ID }}/actual_pr678-app_printing:latest
#          revision-service-account-id: ${{ secrets.YC_SA_ID }}
#          revision-env: |
#            AMQP_URL=${{ secrets.ENV_AMQP_URL }}
#            POSTGRES_URL=${{ secrets.ENV_POSTGRES_URL }}
